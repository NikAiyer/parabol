import React from 'react'
import renderSSRElement from '../../../../../server/email/renderSSRElement'
import ServerEnvironment from '../../../../../server/email/ServerEnvironment'
import {GQLContext} from '../../../../../server/graphql/graphql'
import {PALETTE} from '../../../../styles/paletteV2'
import {MEETING_SUMMARY_LABEL} from '../../../../utils/constants'
import makeDateString from '../../../../utils/makeDateString'
import emailTemplate from './MeetingSummaryEmail/EmailTemplate'

interface Props {
  meetingId: string
  context: GQLContext
}

const newMeetingSummaryEmailCreator = async (props: Props) => {
  const {meetingId, context} = props
  const {authToken, dataLoader} = context
  const dataLoaderId = dataLoader.share()
  const environment = new ServerEnvironment(authToken, dataLoaderId)
  // this depends on types, and those types are generated by created the schema, which must crawl the endMeeting file
  const MeetingSummaryEmailRootSSR = require('../../../summary/components/MeetingSummaryEmailRootSSR')
    .default
  const bodyContent = await renderSSRElement(
    <MeetingSummaryEmailRootSSR environment={environment} meetingId={meetingId} />,
    environment
  )
  const newMeeting = await dataLoader.get('newMeetings').load(meetingId)
  const team = await dataLoader.get('teams').load(newMeeting.teamId)
  const {name: meetingName, endedAt} = newMeeting
  const {name: teamName} = team
  const dateStr = makeDateString(endedAt)
  const subject = `${teamName} ${dateStr} ${meetingName} ${MEETING_SUMMARY_LABEL}`
  const html = emailTemplate({
    bodyContent,
    title: subject,
    previewText: subject,
    bgColor: PALETTE.BACKGROUND_MAIN
  })

  return {
    subject,
    body: `Hello, ${teamName}. Here is your ${meetingName} summary`,
    html
  }
}

export default newMeetingSummaryEmailCreator
